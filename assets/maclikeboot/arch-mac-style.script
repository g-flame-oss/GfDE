#==============================================================================
# GfDE Plymouth theme
# Version: 0.5
# Author: g-flame (https://github.com/g-flame)
# License: MIT
#==============================================================================
# Change these values to customize your boot splash
# ===================================
# Background Color (RGB values 0-1)
BACKGROUND_RED = 0;
BACKGROUND_GREEN = 0;
BACKGROUND_BLUE = 0;

# Logo Settings
LOGO_IMAGE_FILE = "logo.png";
LOGO_VERTICAL_POSITION = 0.3;  # How far down the screen (0.0 = top, 1.0 = bottom)

# Progress Bar Appearance
PROGRESS_BAR_WIDTH = 300;
PROGRESS_BAR_HEIGHT = 12;
PROGRESS_BAR_DISTANCE_FROM_LOGO = 60;  # Pixels below the logo
PROGRESS_BACKGROUND_IMAGE = "progress_bg.png";
PROGRESS_FILL_IMAGE = "progress_fill.png";
PROGRESS_ANIMATION_SMOOTHNESS = 0.15;  # Lower = smoother but slower (0.01-1.0)

# Text Settings
TEXT_FONT = "Sans 12";
TEXT_RED = 1;
TEXT_GREEN = 1;
TEXT_BLUE = 1;
TEXT_ALPHA = 1;

# Text Positioning (pixels below progress bar)
MESSAGE_OFFSET = 40;
QUESTION_OFFSET = 60;
ANSWER_OFFSET = 80;

# Password Display
PASSWORD_BULLET = "‚óè";
##########################################################################################
#       Installer by G-flame @ https://github.com/g-flame                                
#       Panel and Daemon by Airlinklabs @ https://github.com/airlinklabs                 
#                                                                                        
#       MIT License                                                                      
#                                                                                        
#       Copyright (c) 2025 G-flame-OSS                                                   
#                                                                                        
#       Permission is hereby granted, free of charge, to any person obtaining a copy     
#       of this software and associated documentation files (the "Software"), to deal    
#       in the Software without restriction, including without limitation the rights     
#       to use, copy, modify, merge, publish, distribute, sublicense, and/or sell        
#       copies of the Software, and to permit persons to whom the Software is            
#       furnished to do so, subject to the following conditions:                         
#                                                                                        
#       The above copyright notice and this permission notice shall be included in all  
#       copies or substantial portions of the Software.                                  
#                                                                                        
#       THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR       
#       IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,         
#       FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE      
#       AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER           
#       LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,    
#       OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE   
#       SOFTWARE.                                                                        
##########################################################################################

# ===================================
# SYSTEM SETUP - DON'T CHANGE BELOW
# ===================================

# Get screen size
screen_width = Window.GetWidth();
screen_height = Window.GetHeight();

# Set the background color
Window.SetBackgroundTopColor(BACKGROUND_RED, BACKGROUND_GREEN, BACKGROUND_BLUE);
Window.SetBackgroundBottomColor(BACKGROUND_RED, BACKGROUND_GREEN, BACKGROUND_BLUE);

# ===================================
# LOGO SETUP
# ===================================

# Load the logo and create a sprite
logo_image = Image(LOGO_IMAGE_FILE);
logo_sprite = Sprite(logo_image);

# Position the logo in the center horizontally and at the specified vertical position
logo_x_position = screen_width / 2 - logo_image.GetWidth() / 2;
logo_y_position = screen_height * LOGO_VERTICAL_POSITION;
logo_sprite.SetPosition(logo_x_position, logo_y_position);

# ===================================
# PROGRESS BAR SETUP
# ===================================

# Calculate where the progress bar should be positioned
progress_bar_x_position = screen_width / 2 - PROGRESS_BAR_WIDTH / 2;
progress_bar_y_position = logo_y_position + logo_image.GetHeight() + PROGRESS_BAR_DISTANCE_FROM_LOGO;

# Create the progress bar background
progress_background_sprite = Sprite(Image(PROGRESS_BACKGROUND_IMAGE).Scale(PROGRESS_BAR_WIDTH, PROGRESS_BAR_HEIGHT));
progress_background_sprite.SetPosition(progress_bar_x_position, progress_bar_y_position);

# Create the progress bar fill (starts empty)
progress_fill_sprite = Sprite();
progress_fill_sprite.SetPosition(progress_bar_x_position, progress_bar_y_position);
progress_fill_sprite.SetOpacity(1);

# Pre-load and scale the fill image for better performance
cached_progress_fill_image = Image(PROGRESS_FILL_IMAGE).Scale(PROGRESS_BAR_WIDTH, PROGRESS_BAR_HEIGHT);

# Progress tracking variables
current_progress_value = 0;
target_progress_value = 0;

# ===================================
# TEXT DISPLAY SETUP
# ===================================

# Create reusable text sprites
status_message_sprite = Sprite();
user_question_sprite = Sprite();
user_answer_sprite = Sprite();

# Helper function to create and display text
fun display_text(text_sprite, text_content, vertical_position) {
    if (text_content != "") {
        # Create the text image with our configured settings
        text_image = Image.Text(text_content, TEXT_RED, TEXT_GREEN, TEXT_BLUE, TEXT_ALPHA, TEXT_FONT);
        text_sprite.SetImage(text_image);
        
        # Center the text horizontally
        text_x_position = screen_width / 2 - text_image.GetWidth() / 2;
        text_sprite.SetPosition(text_x_position, vertical_position);
        text_sprite.SetOpacity(1);
    } else {
        # Hide the text if there's nothing to display
        text_sprite.SetOpacity(0);
    }
}

# ===================================
# PROGRESS BAR ANIMATION
# ===================================

# Function called when boot progress updates
fun handle_progress_update(duration, new_progress_value) {
    target_progress_value = new_progress_value;
    
    # Keep progress within valid range (0 to 1)
    if (target_progress_value < 0) target_progress_value = 0;
    if (target_progress_value > 1) target_progress_value = 1;
}

# Function to smoothly animate the progress bar
fun animate_progress_bar() {
    # Calculate the difference between current and target progress
    progress_difference = target_progress_value - current_progress_value;
    
    # Only update if there's a meaningful difference
    if (Math.Abs(progress_difference) > 0.001) {
        # Smoothly move towards the target
        current_progress_value += progress_difference * PROGRESS_ANIMATION_SMOOTHNESS;
        
        # Ensure we stay within bounds
        if (current_progress_value < 0) current_progress_value = 0;
        if (current_progress_value > 1) current_progress_value = 1;
        
        # Calculate how wide the fill should be
        fill_width = PROGRESS_BAR_WIDTH * current_progress_value;
        
        if (fill_width > 1) {
            # Crop the fill image to show the right amount of progress
            cropped_fill_image = cached_progress_fill_image.Crop(0, 0, fill_width, PROGRESS_BAR_HEIGHT);
            progress_fill_sprite.SetImage(cropped_fill_image);
            progress_fill_sprite.SetOpacity(1);
        } else {
            # Hide the fill when it's too small to prevent flickering
            progress_fill_sprite.SetOpacity(0);
        }
    }
}

# ===================================
# PLYMOUTH EVENT HANDLERS
# ===================================

# Handle boot progress updates
Plymouth.SetBootProgressFunction(handle_progress_update);
Plymouth.SetUpdateStatusFunction(fun(progress_value) { 
    handle_progress_update(0, progress_value); 
});

# Show logo when root filesystem is mounted
Plymouth.SetRootMountedFunction(fun() { 
    logo_sprite.SetOpacity(1); 
});

# Display status messages
Plymouth.SetDisplayMessageFunction(fun(message_text) {
    display_text(status_message_sprite, message_text, progress_bar_y_position + MESSAGE_OFFSET);
});

# Display questions and user input
Plymouth.SetDisplayQuestionFunction(fun(question_text, user_input) {
    display_text(user_question_sprite, question_text, progress_bar_y_position + QUESTION_OFFSET);
    display_text(user_answer_sprite, user_input, progress_bar_y_position + ANSWER_OFFSET);
});

# Hide prompts in normal mode
Plymouth.SetDisplayNormalFunction(fun() {
    user_question_sprite.SetOpacity(0);
    user_answer_sprite.SetOpacity(0);
});

# Display password prompts with bullets
Plymouth.SetDisplayPasswordFunction(fun(password_prompt, bullet_count) {
    display_text(user_question_sprite, password_prompt, progress_bar_y_position + QUESTION_OFFSET);
    
    # Create a string of bullets for the password
    password_display = "";
    for (i = 0; i < bullet_count; i++) {
        password_display += PASSWORD_BULLET;
    }
    
    display_text(user_answer_sprite, password_display, progress_bar_y_position + ANSWER_OFFSET);
});

# Main animation loop
Plymouth.SetRefreshFunction(fun() {
    animate_progress_bar();
});

